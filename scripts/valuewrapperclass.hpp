//## Copyright (c) 2017-2021 The Khronos Group Inc.
//## Copyright (c) 2019-2020 Collabora, Ltd.
//##
//## Licensed under the Apache License, Version 2.0 (the "License");
//## you may not use this file except in compliance with the License.
//## You may obtain a copy of the License at
//##
//##     http://www.apache.org/licenses/LICENSE-2.0
//##
//## Unless required by applicable law or agreed to in writing, software
//## distributed under the License is distributed on an "AS IS" BASIS,
//## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//## See the License for the specific language governing permissions and
//## limitations under the License.
//##
//## ---- Exceptions to the Apache 2.0 License: ----
//##
//## As an exception, if you use this Software to generate code and portions of
//## this Software are embedded into the generated code as a result, you may
//## redistribute such product without providing attribution as would otherwise
//## be required by Sections 4(a), 4(b) and 4(d) of the License.
//##
//## In addition, if you combine or link code generated by this Software with
//## software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
//## ("`Combined Software`") and if a court of competent jurisdiction determines
//## that the patent provision (Section 3), the indemnity provision (Section 9)
//## or other Section of the License conflicts with the conditions of the
//## applicable GPL or LGPL license, you may retroactively and prospectively
//## choose to deem waived or otherwise exclude such Section(s) of the License,
//## but only in their entirety and only with respect to the Combined Software.

//## By default, assume these are "small" and should be passed by value
//# if input_param_type is not defined
//#     set input_param_type = type
//# endif

//## Default to only providing equality/inequality
//# if comparison_operators is not defined
//#     set comparison_operators = ('==', '!=')
//# endif

//# if object_instance_desc is not defined
//#     set object_instance_desc = "value"
//# endif


//# extends 'wrapperclass.hpp'

//# block constructors scoped
//#     block constructor_default scoped

    //! Default constructor.
    OPENXR_HPP_CONSTEXPR /*{ type }*/ () noexcept = default;

//#     endblock constructor_default

//#     block constructor_explicit scoped

    //! Explicit constructor from raw /*{ raw_type }*/ value
    OPENXR_HPP_CONSTEXPR explicit /*{ type }*/ (/*{ raw_type }*/ v) noexcept : val_(v) {}

//#     endblock constructor_explicit

//#     block extra_constructors_conversion_assign scoped
//#     endblock extra_constructors_conversion_assign

//# endblock constructors


//# block validity
    /*!
     * @name Validity checking
     * @{
     */

//#     block conversion_explicit_bool
//#         if invalid
    //! Returns true in conditionals if this /*{ type }*/ /*{ object_instance_desc }*/ is valid
    OPENXR_HPP_CONSTEXPR explicit operator bool() const noexcept { return val_ != /*{ invalid }*/; }

//#         endif
//#     endblock conversion_explicit_bool

//#     block operator_negation
//#         if invalid
    //! Unary negation: True if this /*{ type }*/ /*{ object_instance_desc }*/ is invalid
    OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ == /*{ invalid }*/; }

//#         endif
//#     endblock operator_negation

//#     block extra_validity
//#     endblock extra_validity
    //! @}
//# endblock validity

//# block method_get_body
        return val_;
//# endblock method_get_body

//# block method_put_body
        if (clear) val_ = /*{ invalid if invalid else "0"}*/;
        return &val_;
//# endblock method_put_body

//# block private
    /*{ raw_type }*/ val_{/*{ invalid }*/};
//# endblock private
