//## Copyright (c) 2017-2021 The Khronos Group Inc.
//## Copyright (c) 2019-2021 Collabora, Ltd.
//##
//## Licensed under the Apache License, Version 2.0 (the "License");
//## you may not use this file except in compliance with the License.
//## You may obtain a copy of the License at
//##
//##     http://www.apache.org/licenses/LICENSE-2.0
//##
//## Unless required by applicable law or agreed to in writing, software
//## distributed under the License is distributed on an "AS IS" BASIS,
//## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//## See the License for the specific language governing permissions and
//## limitations under the License.
//##
//## ---- Exceptions to the Apache 2.0 License: ----
//##
//## As an exception, if you use this Software to generate code and portions of
//## this Software are embedded into the generated code as a result, you may
//## redistribute such product without providing attribution as would otherwise
//## be required by Sections 4(a), 4(b) and 4(d) of the License.
//##
//## In addition, if you combine or link code generated by this Software with
//## software that is licensed under the GPLv2 or the LGPL v2.0 or 2.1
//## ("`Combined Software`") and if a court of competent jurisdiction determines
//## that the patent provision (Section 3), the indemnity provision (Section 9)
//## or other Section of the License conflicts with the conditions of the
//## applicable GPL or LGPL license, you may retroactively and prospectively
//## choose to deem waived or otherwise exclude such Section(s) of the License,
//## but only in their entirety and only with respect to the Combined Software.


//# set type = "Bool32"
//# set comparison_operators = ('==', '!=')
//# set invalid = ""
//# set filename = "openxr_bool"
//# set doc_group = "wrappers"
//# set cannot_clear = true
//# extends "valuewrapperclass_header.hpp"

//# block includes
/**
 * @file
 * @brief Contains a type-safe C++ projection of XrBool32
 *
 * @see xr::Bool32
 * @ingroup wrappers
 */

#include <openxr/openxr.h>
//# endblock

//# block constructors scoped
/*{ super() }*/

//! Implicitly construct from bool
OPENXR_HPP_CONSTEXPR /*{ type }*/ (bool val) noexcept : val_(val ? XR_TRUE : XR_FALSE) {}

//! Implicitly assign from bool
/*{ type }*/& operator=(bool val) noexcept {
    val_ = val ? XR_TRUE : XR_FALSE;
    return *this;
}

//! Create from a raw XrBool32. Exists because construction from integral types is weird.
static OPENXR_HPP_CONSTEXPR /*{ type }*/ fromRaw(XrBool32 val) noexcept {
    return {val == XR_TRUE};
}
//# endblock constructors

//# block validity
//! True if this value is XR_TRUE
explicit OPENXR_HPP_CONSTEXPR operator bool() const noexcept { return val_ == XR_TRUE; }

//! Unary negation: True if this /*{ type }*/ is not XR_TRUE
OPENXR_HPP_CONSTEXPR bool operator!() const noexcept { return val_ != XR_TRUE; }
//# endblock validity


//# block extra_methods
//# endblock
